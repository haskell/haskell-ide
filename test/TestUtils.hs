{-# LANGUAGE CPP #-}
module TestUtils
  (
    testOptions
  , cdAndDo
  , withTestLogging
  , withFileLogging
  , setupStackFiles
  ) where

import           Control.Exception
import           Control.Monad
import           Data.Aeson.Types (typeMismatch)
import           Data.Text (pack)
import           Data.Yaml
import qualified GhcMod.Monad as GM
import qualified GhcMod.Types as GM
import qualified Language.Haskell.LSP.Core as Core
import           System.Directory
import qualified System.Log.Logger as L


-- ---------------------------------------------------------------------

testOptions :: GM.Options
testOptions = GM.defaultOptions {
    GM.optOutput     = GM.OutputOpts {
      GM.ooptLogLevel       = GM.GmError
      -- GM.ooptLogLevel       = GM.GmVomit
    , GM.ooptStyle          = GM.PlainStyle
    , GM.ooptLineSeparator  = GM.LineSeparator "\0"
    , GM.ooptLinePrefix     = Nothing
    }

    }

cdAndDo :: FilePath -> IO a -> IO a
cdAndDo path fn = do
  old <- getCurrentDirectory
  r <- bracket (setCurrentDirectory path) (\_ -> setCurrentDirectory old)
          $ \_ -> fn
  return r

withTestLogging :: IO a -> IO a
withTestLogging = withFileLogging "./test-main.log"


withFileLogging :: FilePath -> IO a -> IO a
withFileLogging filePath f = do
  Core.setupLogger (Just filePath) ["hie"] L.DEBUG
  f

-- ---------------------------------------------------------------------

setupStackFiles :: IO ()
setupStackFiles =
  forM_ files $ \f -> do
    resolver <- readResolver
    writeFile (f ++ "stack.yaml") $ stackFileContents resolver
    removePathForcibly (f ++ ".stack-work")

-- ---------------------------------------------------------------------

files :: [FilePath]
files =
  [  "./test/testdata/"
   , "./test/testdata/gototest/"
  ]

-- |Choose a resolver based on the current compiler, otherwise HaRe/ghc-mod will
-- not be able to load the files
readResolver :: IO String
readResolver =
#if (defined(MIN_VERSION_GLASGOW_HASKELL) && (MIN_VERSION_GLASGOW_HASKELL(8,2,2,0)))
  readResolverFrom "stack-8.2.2.yaml"
#elif __GLASGOW_HASKELL__ >= 802
  readResolverFrom "stack-8.2.1.yaml"
#else
  readResolverFrom "stack.yaml"
#endif

newtype StackResolver = StackResolver String

instance FromJSON StackResolver where
  parseJSON (Object x) = StackResolver <$> x .: pack "resolver"
  parseJSON invalid = typeMismatch "StackResolver" invalid

readResolverFrom :: FilePath -> IO String
readResolverFrom yamlPath = do
  result <- decodeFileEither yamlPath
  case result of
    Left err -> error $ yamlPath ++ " parsing failed: " ++ show err
    Right (StackResolver res) -> return res

-- ---------------------------------------------------------------------

stackFileContents :: String -> String
stackFileContents resolver = unlines $
  [ "# WARNING: THIS FILE IS AUTOGENERATED IN test/Main.hs. IT WILL BE OVERWRITTEN ON EVERY TEST RUN"
  , "resolver: " ++ resolver
  , "packages:"
  , "- '.'"
  , "extra-deps: []"
  , "flags: {}"
  , "extra-package-dbs: []"
  -- , "- conversion-1.2.1"
  -- , "- conversion-case-insensitive-1.0.0.0"
  -- , "- conversion-text-1.0.1"
  ]
-- ---------------------------------------------------------------------
